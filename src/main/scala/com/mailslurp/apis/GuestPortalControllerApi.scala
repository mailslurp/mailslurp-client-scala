/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.mailslurp.apis

import com.mailslurp.modelspackageVersion&#x3D;16.2.0.CreatePortalOptions
import com.mailslurp.modelspackageVersion&#x3D;16.2.0.CreatePortalUserOptions
import com.mailslurp.modelspackageVersion&#x3D;16.2.0.GuestPortalDto
import com.mailslurp.modelspackageVersion&#x3D;16.2.0.GuestPortalUserCreateDto
import com.mailslurp.modelspackageVersion&#x3D;16.2.0.GuestPortalUserDto
import java.time.OffsetDateTime
import com.mailslurp.modelspackageVersion&#x3D;16.2.0.PageGuestPortalUsers
import java.util.UUID
import com.mailslurp.client.core.JsonSupport._
import sttp.client._
import sttp.model.Method

object GuestPortalControllerApi {

def apply(baseUrl: String = "https://api.mailslurp.com") = new GuestPortalControllerApi(baseUrl)
}

class GuestPortalControllerApi(baseUrl: String) {

  /**
   * Create a guest login page for customers or clients to access assigned email addresses
   * 
   * Expected answers:
   *   code 200 : GuestPortalDto (OK)
   * 
   * Available security schemes:
   *   API_KEY (apiKey)
   * 
   * @param createPortalOptions 
   */
  def createGuestPortal(apiKey: String)(createPortalOptions: CreatePortalOptions
): Request[Either[ResponseError[Exception], GuestPortalDto], Nothing] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/guest-portal")
      .contentType("application/json")
      .header("x-api-key", apiKey)
      .body(createPortalOptions)
      .response(asJson[GuestPortalDto])

  /**
   * Add customer to portal
   * 
   * Expected answers:
   *   code 200 : GuestPortalUserCreateDto (OK)
   * 
   * Available security schemes:
   *   API_KEY (apiKey)
   * 
   * @param portalId 
   * @param createPortalUserOptions 
   */
  def createGuestPortalUser(apiKey: String)(portalId: UUID, createPortalUserOptions: CreatePortalUserOptions
): Request[Either[ResponseError[Exception], GuestPortalUserCreateDto], Nothing] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/guest-portal/${portalId}/user")
      .contentType("application/json")
      .header("x-api-key", apiKey)
      .body(createPortalUserOptions)
      .response(asJson[GuestPortalUserCreateDto])

  /**
   * Get all customers for a portal
   * 
   * Expected answers:
   *   code 200 : PageGuestPortalUsers (OK)
   * 
   * Available security schemes:
   *   API_KEY (apiKey)
   * 
   * @param portalId Optional portal ID
   * @param search Optional search term
   * @param page Optional page index in list pagination
   * @param size Optional page size in list pagination
   * @param sort Optional createdAt sort direction ASC or DESC
   * @param since Filter by created at after the given timestamp
   * @param before Filter by created at before the given timestamp
   */
  def getAllGuestPortalUsers(apiKey: String)(portalId: Option[UUID] = None, search: Option[String] = None, page: Option[Int] = None, size: Option[Int] = None, sort: Option[String] = None, since: Option[OffsetDateTime] = None, before: Option[OffsetDateTime] = None
): Request[Either[ResponseError[Exception], PageGuestPortalUsers], Nothing] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/guest-portal/user?portalId=${ portalId }&search=${ search }&page=${ page }&size=${ size }&sort=${ sort }&since=${ since }&before=${ before }")
      .contentType("application/json")
      .header("x-api-key", apiKey)
      .response(asJson[PageGuestPortalUsers])

  /**
   * Fetch a customer guest portal
   * 
   * Expected answers:
   *   code 200 : GuestPortalDto (OK)
   * 
   * Available security schemes:
   *   API_KEY (apiKey)
   * 
   * @param portalId 
   */
  def getGuestPortal(apiKey: String)(portalId: UUID
): Request[Either[ResponseError[Exception], GuestPortalDto], Nothing] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/guest-portal/${portalId}")
      .contentType("application/json")
      .header("x-api-key", apiKey)
      .response(asJson[GuestPortalDto])

  /**
   * Get customer for portal
   * 
   * Expected answers:
   *   code 200 : GuestPortalUserDto (OK)
   * 
   * Available security schemes:
   *   API_KEY (apiKey)
   * 
   * @param portalId 
   * @param guestId 
   */
  def getGuestPortalUser(apiKey: String)(portalId: UUID, guestId: UUID
): Request[Either[ResponseError[Exception], GuestPortalUserDto], Nothing] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/guest-portal/${portalId}/user/${guestId}")
      .contentType("application/json")
      .header("x-api-key", apiKey)
      .response(asJson[GuestPortalUserDto])

  /**
   * Get customer by ID
   * 
   * Expected answers:
   *   code 200 : GuestPortalUserDto (OK)
   * 
   * Available security schemes:
   *   API_KEY (apiKey)
   * 
   * @param guestId 
   */
  def getGuestPortalUserById(apiKey: String)(guestId: UUID
): Request[Either[ResponseError[Exception], GuestPortalUserDto], Nothing] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/guest-portal/user/${guestId}")
      .contentType("application/json")
      .header("x-api-key", apiKey)
      .response(asJson[GuestPortalUserDto])

  /**
   * Get customers for a portal
   * 
   * Expected answers:
   *   code 200 : PageGuestPortalUsers (OK)
   * 
   * Available security schemes:
   *   API_KEY (apiKey)
   * 
   * @param portalId 
   * @param search Optional search term
   * @param page Optional page index in list pagination
   * @param size Optional page size in list pagination
   * @param sort Optional createdAt sort direction ASC or DESC
   * @param since Filter by created at after the given timestamp
   * @param before Filter by created at before the given timestamp
   */
  def getGuestPortalUsers(apiKey: String)(portalId: UUID, search: Option[String] = None, page: Option[Int] = None, size: Option[Int] = None, sort: Option[String] = None, since: Option[OffsetDateTime] = None, before: Option[OffsetDateTime] = None
): Request[Either[ResponseError[Exception], PageGuestPortalUsers], Nothing] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/guest-portal/${portalId}/user?search=${ search }&page=${ page }&size=${ size }&sort=${ sort }&since=${ since }&before=${ before }")
      .contentType("application/json")
      .header("x-api-key", apiKey)
      .response(asJson[PageGuestPortalUsers])

  /**
   * Get portals
   * 
   * Expected answers:
   *   code 200 : Seq[GuestPortalDto] (OK)
   * 
   * Available security schemes:
   *   API_KEY (apiKey)
   */
  def getGuestPortals(apiKey: String)(
): Request[Either[ResponseError[Exception], Seq[GuestPortalDto]], Nothing] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/guest-portal")
      .contentType("application/json")
      .header("x-api-key", apiKey)
      .response(asJson[Seq[GuestPortalDto]])

}
