/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.mailslurp.apis

import com.mailslurp.modelspackageVersion&#x3D;15.21.0.ConnectorDto
import com.mailslurp.modelspackageVersion&#x3D;15.21.0.ConnectorEventDto
import com.mailslurp.modelspackageVersion&#x3D;15.21.0.ConnectorImapConnectionDto
import com.mailslurp.modelspackageVersion&#x3D;15.21.0.ConnectorImapConnectionTestResult
import com.mailslurp.modelspackageVersion&#x3D;15.21.0.ConnectorProviderSettingsDto
import com.mailslurp.modelspackageVersion&#x3D;15.21.0.ConnectorSmtpConnectionDto
import com.mailslurp.modelspackageVersion&#x3D;15.21.0.ConnectorSmtpConnectionTestResult
import com.mailslurp.modelspackageVersion&#x3D;15.21.0.ConnectorSyncRequestResult
import com.mailslurp.modelspackageVersion&#x3D;15.21.0.ConnectorSyncSettingsDto
import com.mailslurp.modelspackageVersion&#x3D;15.21.0.CreateConnectorImapConnectionOptions
import com.mailslurp.modelspackageVersion&#x3D;15.21.0.CreateConnectorOptions
import com.mailslurp.modelspackageVersion&#x3D;15.21.0.CreateConnectorSmtpConnectionOptions
import com.mailslurp.modelspackageVersion&#x3D;15.21.0.CreateConnectorSyncSettingsOptions
import com.mailslurp.modelspackageVersion&#x3D;15.21.0.CreateConnectorWithOptions
import java.time.OffsetDateTime
import com.mailslurp.modelspackageVersion&#x3D;15.21.0.OptionalConnectorDto
import com.mailslurp.modelspackageVersion&#x3D;15.21.0.OptionalConnectorImapConnectionDto
import com.mailslurp.modelspackageVersion&#x3D;15.21.0.OptionalConnectorSmtpConnectionDto
import com.mailslurp.modelspackageVersion&#x3D;15.21.0.OptionalConnectorSyncSettingsDto
import com.mailslurp.modelspackageVersion&#x3D;15.21.0.PageConnector
import com.mailslurp.modelspackageVersion&#x3D;15.21.0.PageConnectorEvents
import com.mailslurp.modelspackageVersion&#x3D;15.21.0.SendEmailOptions
import com.mailslurp.modelspackageVersion&#x3D;15.21.0.SentEmailDto
import java.util.UUID
import com.mailslurp.client.core.JsonSupport._
import sttp.client._
import sttp.model.Method

object ConnectorControllerApi {

def apply(baseUrl: String = "https://api.mailslurp.com") = new ConnectorControllerApi(baseUrl)
}

class ConnectorControllerApi(baseUrl: String) {

  /**
   * Sync emails between external mailboxes and MailSlurp inboxes
   * 
   * Expected answers:
   *   code 201 : ConnectorDto (Created)
   * 
   * Available security schemes:
   *   API_KEY (apiKey)
   * 
   * @param createConnectorOptions 
   * @param inboxId Optional inbox ID to associate with the connector
   */
  def createConnector(apiKey: String)(createConnectorOptions: CreateConnectorOptions, inboxId: Option[UUID] = None
): Request[Either[ResponseError[Exception], ConnectorDto], Nothing] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/connectors?inboxId=${ inboxId }")
      .contentType("application/json")
      .header("x-api-key", apiKey)
      .body(createConnectorOptions)
      .response(asJson[ConnectorDto])

  /**
   * Allows the reading of emails in an external mailbox and syncing to a MailSlurp inbox
   * 
   * Expected answers:
   *   code 201 : ConnectorImapConnectionDto (Created)
   * 
   * Available security schemes:
   *   API_KEY (apiKey)
   * 
   * @param id 
   * @param createConnectorImapConnectionOptions 
   */
  def createConnectorImapConnection(apiKey: String)(id: UUID, createConnectorImapConnectionOptions: CreateConnectorImapConnectionOptions
): Request[Either[ResponseError[Exception], ConnectorImapConnectionDto], Nothing] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/connectors/${id}/imap")
      .contentType("application/json")
      .header("x-api-key", apiKey)
      .body(createConnectorImapConnectionOptions)
      .response(asJson[ConnectorImapConnectionDto])

  /**
   * Allows sending via connector and email is routed to connected inbox and sent via SMTP
   * 
   * Expected answers:
   *   code 201 : ConnectorSmtpConnectionDto (Created)
   * 
   * Available security schemes:
   *   API_KEY (apiKey)
   * 
   * @param id 
   * @param createConnectorSmtpConnectionOptions 
   */
  def createConnectorSmtpConnection(apiKey: String)(id: UUID, createConnectorSmtpConnectionOptions: CreateConnectorSmtpConnectionOptions
): Request[Either[ResponseError[Exception], ConnectorSmtpConnectionDto], Nothing] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/connectors/${id}/smtp")
      .contentType("application/json")
      .header("x-api-key", apiKey)
      .body(createConnectorSmtpConnectionOptions)
      .response(asJson[ConnectorSmtpConnectionDto])

  /**
   * Configure automatic pull or emails from external inboxes using an interval or schedule
   * 
   * Expected answers:
   *   code 201 : ConnectorSyncSettingsDto (Created)
   * 
   * Available security schemes:
   *   API_KEY (apiKey)
   * 
   * @param id 
   * @param createConnectorSyncSettingsOptions 
   */
  def createConnectorSyncSettings(apiKey: String)(id: UUID, createConnectorSyncSettingsOptions: CreateConnectorSyncSettingsOptions
): Request[Either[ResponseError[Exception], ConnectorSyncSettingsDto], Nothing] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/connectors/${id}/sync-settings")
      .contentType("application/json")
      .header("x-api-key", apiKey)
      .body(createConnectorSyncSettingsOptions)
      .response(asJson[ConnectorSyncSettingsDto])

  /**
   * Sync emails between external mailboxes and MailSlurp inboxes
   * 
   * Expected answers:
   *   code 201 : ConnectorDto (Created)
   * 
   * Available security schemes:
   *   API_KEY (apiKey)
   * 
   * @param createConnectorWithOptions 
   * @param inboxId Optional inbox ID to associate with the connector
   */
  def createConnectorWithOptions(apiKey: String)(createConnectorWithOptions: CreateConnectorWithOptions, inboxId: Option[UUID] = None
): Request[Either[ResponseError[Exception], ConnectorDto], Nothing] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/connectors/withOptions?inboxId=${ inboxId }")
      .contentType("application/json")
      .header("x-api-key", apiKey)
      .body(createConnectorWithOptions)
      .response(asJson[ConnectorDto])

  /**
   * Expected answers:
   *   code 204 :  (No Content)
   * 
   * Available security schemes:
   *   API_KEY (apiKey)
   */
  def deleteAllConnector(apiKey: String)(
): Request[Either[ResponseError[Exception], Unit], Nothing] =
    basicRequest
      .method(Method.DELETE, uri"$baseUrl/connectors")
      .contentType("application/json")
      .header("x-api-key", apiKey)
      .response(asJson[Unit])

  /**
   * Expected answers:
   *   code 204 :  (No Content)
   * 
   * Available security schemes:
   *   API_KEY (apiKey)
   * 
   * @param id 
   */
  def deleteConnector(apiKey: String)(id: UUID
): Request[Either[ResponseError[Exception], Unit], Nothing] =
    basicRequest
      .method(Method.DELETE, uri"$baseUrl/connectors/${id}")
      .contentType("application/json")
      .header("x-api-key", apiKey)
      .response(asJson[Unit])

  /**
   * Delete IMAP connection for external inbox
   * 
   * Expected answers:
   *   code 204 :  (No Content)
   * 
   * Available security schemes:
   *   API_KEY (apiKey)
   * 
   * @param id 
   */
  def deleteConnectorImapConnection(apiKey: String)(id: UUID
): Request[Either[ResponseError[Exception], Unit], Nothing] =
    basicRequest
      .method(Method.DELETE, uri"$baseUrl/connectors/${id}/imap")
      .contentType("application/json")
      .header("x-api-key", apiKey)
      .response(asJson[Unit])

  /**
   * Delete SMTP connection for external inbox
   * 
   * Expected answers:
   *   code 204 :  (No Content)
   * 
   * Available security schemes:
   *   API_KEY (apiKey)
   * 
   * @param id 
   */
  def deleteConnectorSmtpConnection(apiKey: String)(id: UUID
): Request[Either[ResponseError[Exception], Unit], Nothing] =
    basicRequest
      .method(Method.DELETE, uri"$baseUrl/connectors/${id}/smtp")
      .contentType("application/json")
      .header("x-api-key", apiKey)
      .response(asJson[Unit])

  /**
   * Configure automatic pull or emails from external inboxes using an interval or schedule
   * 
   * Expected answers:
   *   code 204 :  (No Content)
   * 
   * Available security schemes:
   *   API_KEY (apiKey)
   * 
   * @param id 
   */
  def deleteConnectorSyncSettings(apiKey: String)(id: UUID
): Request[Either[ResponseError[Exception], Unit], Nothing] =
    basicRequest
      .method(Method.DELETE, uri"$baseUrl/connectors/${id}/sync-settings")
      .contentType("application/json")
      .header("x-api-key", apiKey)
      .response(asJson[Unit])

  /**
   * Expected answers:
   *   code 200 : PageConnectorEvents (OK)
   * 
   * Available security schemes:
   *   API_KEY (apiKey)
   * 
   * @param id Optional connector ID
   * @param page Optional page index in connector list pagination
   * @param size Optional page size in connector list pagination
   * @param sort Optional createdAt sort direction ASC or DESC
   * @param since Filter by created at after the given timestamp
   * @param before Filter by created at before the given timestamp
   * @param eventType Filter by event type
   */
  def getAllConnectorEvents(apiKey: String)(id: Option[UUID] = None, page: Option[Int] = None, size: Option[Int] = None, sort: Option[String] = None, since: Option[OffsetDateTime] = None, before: Option[OffsetDateTime] = None, eventType: Option[String] = None
): Request[Either[ResponseError[Exception], PageConnectorEvents], Nothing] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/connectors/events?id=${ id }&page=${ page }&size=${ size }&sort=${ sort }&since=${ since }&before=${ before }&eventType=${ eventType }")
      .contentType("application/json")
      .header("x-api-key", apiKey)
      .response(asJson[PageConnectorEvents])

  /**
   * Expected answers:
   *   code 200 : ConnectorDto (OK)
   * 
   * Available security schemes:
   *   API_KEY (apiKey)
   * 
   * @param id 
   */
  def getConnector(apiKey: String)(id: UUID
): Request[Either[ResponseError[Exception], ConnectorDto], Nothing] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/connectors/${id}")
      .contentType("application/json")
      .header("x-api-key", apiKey)
      .response(asJson[ConnectorDto])

  /**
   * Find an inbox connector by email address
   * 
   * Expected answers:
   *   code 200 : OptionalConnectorDto (OK)
   * 
   * Available security schemes:
   *   API_KEY (apiKey)
   * 
   * @param emailAddress Email address to search for connector by
   */
  def getConnectorByEmailAddress(apiKey: String)(emailAddress: String
): Request[Either[ResponseError[Exception], OptionalConnectorDto], Nothing] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/connectors/by-email-address?emailAddress=${ emailAddress }")
      .contentType("application/json")
      .header("x-api-key", apiKey)
      .response(asJson[OptionalConnectorDto])

  /**
   * Find an inbox connector by inbox ID
   * 
   * Expected answers:
   *   code 200 : OptionalConnectorDto (OK)
   * 
   * Available security schemes:
   *   API_KEY (apiKey)
   * 
   * @param inboxId Inbox ID to search for connector by
   */
  def getConnectorByInboxId(apiKey: String)(inboxId: UUID
): Request[Either[ResponseError[Exception], OptionalConnectorDto], Nothing] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/connectors/by-inbox-id?inboxId=${ inboxId }")
      .contentType("application/json")
      .header("x-api-key", apiKey)
      .response(asJson[OptionalConnectorDto])

  /**
   * Find an inbox connector by name
   * 
   * Expected answers:
   *   code 200 : OptionalConnectorDto (OK)
   * 
   * Available security schemes:
   *   API_KEY (apiKey)
   * 
   * @param name Name to search for connector by
   */
  def getConnectorByName(apiKey: String)(name: String
): Request[Either[ResponseError[Exception], OptionalConnectorDto], Nothing] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/connectors/by-name?name=${ name }")
      .contentType("application/json")
      .header("x-api-key", apiKey)
      .response(asJson[OptionalConnectorDto])

  /**
   * Expected answers:
   *   code 200 : ConnectorEventDto (OK)
   * 
   * Available security schemes:
   *   API_KEY (apiKey)
   * 
   * @param id 
   */
  def getConnectorEvent(apiKey: String)(id: UUID
): Request[Either[ResponseError[Exception], ConnectorEventDto], Nothing] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/connectors/events/${id}")
      .contentType("application/json")
      .header("x-api-key", apiKey)
      .response(asJson[ConnectorEventDto])

  /**
   * Expected answers:
   *   code 200 : PageConnectorEvents (OK)
   * 
   * Available security schemes:
   *   API_KEY (apiKey)
   * 
   * @param id 
   * @param page Optional page index in connector list pagination
   * @param size Optional page size in connector list pagination
   * @param sort Optional createdAt sort direction ASC or DESC
   * @param since Filter by created at after the given timestamp
   * @param before Filter by created at before the given timestamp
   * @param eventType Filter by event type
   */
  def getConnectorEvents(apiKey: String)(id: UUID, page: Option[Int] = None, size: Option[Int] = None, sort: Option[String] = None, since: Option[OffsetDateTime] = None, before: Option[OffsetDateTime] = None, eventType: Option[String] = None
): Request[Either[ResponseError[Exception], PageConnectorEvents], Nothing] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/connectors/${id}/events?page=${ page }&size=${ size }&sort=${ sort }&since=${ since }&before=${ before }&eventType=${ eventType }")
      .contentType("application/json")
      .header("x-api-key", apiKey)
      .response(asJson[PageConnectorEvents])

  /**
   * Get IMAP connection for external inbox
   * 
   * Expected answers:
   *   code 200 : OptionalConnectorImapConnectionDto (OK)
   * 
   * Available security schemes:
   *   API_KEY (apiKey)
   * 
   * @param id 
   */
  def getConnectorImapConnection(apiKey: String)(id: UUID
): Request[Either[ResponseError[Exception], OptionalConnectorImapConnectionDto], Nothing] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/connectors/${id}/imap")
      .contentType("application/json")
      .header("x-api-key", apiKey)
      .response(asJson[OptionalConnectorImapConnectionDto])

  /**
   * Get common mail provider SMTP and IMAP connection settings
   * 
   * Expected answers:
   *   code 200 : ConnectorProviderSettingsDto (OK)
   * 
   * Available security schemes:
   *   API_KEY (apiKey)
   */
  def getConnectorProviderSettings(apiKey: String)(
): Request[Either[ResponseError[Exception], ConnectorProviderSettingsDto], Nothing] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/connectors/provider-settings")
      .contentType("application/json")
      .header("x-api-key", apiKey)
      .response(asJson[ConnectorProviderSettingsDto])

  /**
   * Get SMTP connection for external inbox
   * 
   * Expected answers:
   *   code 200 : OptionalConnectorSmtpConnectionDto (OK)
   * 
   * Available security schemes:
   *   API_KEY (apiKey)
   * 
   * @param id 
   */
  def getConnectorSmtpConnection(apiKey: String)(id: UUID
): Request[Either[ResponseError[Exception], OptionalConnectorSmtpConnectionDto], Nothing] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/connectors/${id}/smtp")
      .contentType("application/json")
      .header("x-api-key", apiKey)
      .response(asJson[OptionalConnectorSmtpConnectionDto])

  /**
   * Get sync settings for connection with external inbox
   * 
   * Expected answers:
   *   code 200 : OptionalConnectorSyncSettingsDto (OK)
   * 
   * Available security schemes:
   *   API_KEY (apiKey)
   * 
   * @param id 
   */
  def getConnectorSyncSettings(apiKey: String)(id: UUID
): Request[Either[ResponseError[Exception], OptionalConnectorSyncSettingsDto], Nothing] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/connectors/${id}/sync-settings")
      .contentType("application/json")
      .header("x-api-key", apiKey)
      .response(asJson[OptionalConnectorSyncSettingsDto])

  /**
   * List inbox connectors that sync external emails to MailSlurp inboxes
   * 
   * Expected answers:
   *   code 200 : PageConnector (OK)
   * 
   * Available security schemes:
   *   API_KEY (apiKey)
   * 
   * @param page Optional page index in connector list pagination
   * @param size Optional page size in connector list pagination
   * @param sort Optional createdAt sort direction ASC or DESC
   * @param since Filter by created at after the given timestamp
   * @param before Filter by created at before the given timestamp
   */
  def getConnectors(apiKey: String)(page: Option[Int] = None, size: Option[Int] = None, sort: Option[String] = None, since: Option[OffsetDateTime] = None, before: Option[OffsetDateTime] = None
): Request[Either[ResponseError[Exception], PageConnector], Nothing] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/connectors?page=${ page }&size=${ size }&sort=${ sort }&since=${ since }&before=${ before }")
      .contentType("application/json")
      .header("x-api-key", apiKey)
      .response(asJson[PageConnector])

  /**
   * Expected answers:
   *   code 200 : SentEmailDto (OK)
   * 
   * Available security schemes:
   *   API_KEY (apiKey)
   * 
   * @param id 
   * @param sendEmailOptions 
   * @param useFallback 
   */
  def sendEmailFromConnector(apiKey: String)(id: UUID, sendEmailOptions: SendEmailOptions, useFallback: Option[Boolean] = None
): Request[Either[ResponseError[Exception], SentEmailDto], Nothing] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/connectors/${id}/send?useFallback=${ useFallback }")
      .contentType("application/json")
      .header("x-api-key", apiKey)
      .body(sendEmailOptions)
      .response(asJson[SentEmailDto])

  /**
   * Expected answers:
   *   code 200 : ConnectorSyncRequestResult (OK)
   * 
   * Available security schemes:
   *   API_KEY (apiKey)
   * 
   * @param id 
   * @param since Date to request emails since
   * @param folder Which folder to sync emails with
   * @param logging Enable or disable logging for the sync operation
   */
  def syncConnector(apiKey: String)(id: UUID, since: Option[OffsetDateTime] = None, folder: Option[String] = None, logging: Option[Boolean] = None
): Request[Either[ResponseError[Exception], ConnectorSyncRequestResult], Nothing] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/connectors/${id}/sync?since=${ since }&folder=${ folder }&logging=${ logging }")
      .contentType("application/json")
      .header("x-api-key", apiKey)
      .response(asJson[ConnectorSyncRequestResult])

  /**
   * Test the IMAP connection for a connector
   * 
   * Expected answers:
   *   code 200 : ConnectorImapConnectionTestResult (OK)
   * 
   * Available security schemes:
   *   API_KEY (apiKey)
   * 
   * @param id 
   * @param createConnectorImapConnectionOptions 
   */
  def testConnectorImapConnection(apiKey: String)(id: UUID, createConnectorImapConnectionOptions: Option[CreateConnectorImapConnectionOptions] = None
): Request[Either[ResponseError[Exception], ConnectorImapConnectionTestResult], Nothing] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/connectors/${id}/imap/test")
      .contentType("application/json")
      .header("x-api-key", apiKey)
      .body(createConnectorImapConnectionOptions)
      .response(asJson[ConnectorImapConnectionTestResult])

  /**
   * Test the IMAP connection options for a connector
   * 
   * Expected answers:
   *   code 200 : ConnectorImapConnectionTestResult (OK)
   * 
   * Available security schemes:
   *   API_KEY (apiKey)
   * 
   * @param createConnectorImapConnectionOptions 
   */
  def testConnectorImapConnectionOptions(apiKey: String)(createConnectorImapConnectionOptions: CreateConnectorImapConnectionOptions
): Request[Either[ResponseError[Exception], ConnectorImapConnectionTestResult], Nothing] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/connectors/connections/imap/test")
      .contentType("application/json")
      .header("x-api-key", apiKey)
      .body(createConnectorImapConnectionOptions)
      .response(asJson[ConnectorImapConnectionTestResult])

  /**
   * Test the SMTP connection for a connector
   * 
   * Expected answers:
   *   code 200 : ConnectorSmtpConnectionTestResult (OK)
   * 
   * Available security schemes:
   *   API_KEY (apiKey)
   * 
   * @param id 
   * @param createConnectorSmtpConnectionOptions 
   */
  def testConnectorSmtpConnection(apiKey: String)(id: UUID, createConnectorSmtpConnectionOptions: Option[CreateConnectorSmtpConnectionOptions] = None
): Request[Either[ResponseError[Exception], ConnectorSmtpConnectionTestResult], Nothing] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/connectors/${id}/smtp/test")
      .contentType("application/json")
      .header("x-api-key", apiKey)
      .body(createConnectorSmtpConnectionOptions)
      .response(asJson[ConnectorSmtpConnectionTestResult])

  /**
   * Test the SMTP connection options for a connector
   * 
   * Expected answers:
   *   code 200 : ConnectorSmtpConnectionTestResult (OK)
   * 
   * Available security schemes:
   *   API_KEY (apiKey)
   * 
   * @param createConnectorSmtpConnectionOptions 
   */
  def testConnectorSmtpConnectionOptions(apiKey: String)(createConnectorSmtpConnectionOptions: CreateConnectorSmtpConnectionOptions
): Request[Either[ResponseError[Exception], ConnectorSmtpConnectionTestResult], Nothing] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/connectors/connections/smtp/test")
      .contentType("application/json")
      .header("x-api-key", apiKey)
      .body(createConnectorSmtpConnectionOptions)
      .response(asJson[ConnectorSmtpConnectionTestResult])

  /**
   * Expected answers:
   *   code 200 : ConnectorDto (OK)
   * 
   * Available security schemes:
   *   API_KEY (apiKey)
   * 
   * @param id 
   * @param createConnectorOptions 
   */
  def updateConnector(apiKey: String)(id: UUID, createConnectorOptions: CreateConnectorOptions
): Request[Either[ResponseError[Exception], ConnectorDto], Nothing] =
    basicRequest
      .method(Method.PUT, uri"$baseUrl/connectors/${id}")
      .contentType("application/json")
      .header("x-api-key", apiKey)
      .body(createConnectorOptions)
      .response(asJson[ConnectorDto])

  /**
   * Update IMAP connection for external inbox
   * 
   * Expected answers:
   *   code 200 : ConnectorImapConnectionDto (OK)
   * 
   * Available security schemes:
   *   API_KEY (apiKey)
   * 
   * @param id 
   * @param createConnectorImapConnectionOptions 
   */
  def updateConnectorImapConnection(apiKey: String)(id: UUID, createConnectorImapConnectionOptions: CreateConnectorImapConnectionOptions
): Request[Either[ResponseError[Exception], ConnectorImapConnectionDto], Nothing] =
    basicRequest
      .method(Method.PATCH, uri"$baseUrl/connectors/${id}/imap")
      .contentType("application/json")
      .header("x-api-key", apiKey)
      .body(createConnectorImapConnectionOptions)
      .response(asJson[ConnectorImapConnectionDto])

  /**
   * Update SMTP connection for external inbox
   * 
   * Expected answers:
   *   code 200 : ConnectorSmtpConnectionDto (OK)
   * 
   * Available security schemes:
   *   API_KEY (apiKey)
   * 
   * @param id 
   * @param createConnectorSmtpConnectionOptions 
   */
  def updateConnectorSmtpConnection(apiKey: String)(id: UUID, createConnectorSmtpConnectionOptions: CreateConnectorSmtpConnectionOptions
): Request[Either[ResponseError[Exception], ConnectorSmtpConnectionDto], Nothing] =
    basicRequest
      .method(Method.PATCH, uri"$baseUrl/connectors/${id}/smtp")
      .contentType("application/json")
      .header("x-api-key", apiKey)
      .body(createConnectorSmtpConnectionOptions)
      .response(asJson[ConnectorSmtpConnectionDto])

}
