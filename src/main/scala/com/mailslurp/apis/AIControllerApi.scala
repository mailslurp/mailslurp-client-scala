/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.mailslurp.apis

import com.mailslurp.modelspackageVersion&#x3D;16.1.3.GenerateStructuredContentAttachmentOptions
import com.mailslurp.modelspackageVersion&#x3D;16.1.3.GenerateStructuredContentEmailOptions
import com.mailslurp.modelspackageVersion&#x3D;16.1.3.StructuredContentResult
import com.mailslurp.modelspackageVersion&#x3D;16.1.3.StructuredOutputSchema
import com.mailslurp.modelspackageVersion&#x3D;16.1.3.StructuredOutputSchemaValidation
import com.mailslurp.client.core.JsonSupport._
import sttp.client._
import sttp.model.Method

object AIControllerApi {

def apply(baseUrl: String = "https://api.mailslurp.com") = new AIControllerApi(baseUrl)
}

class AIControllerApi(baseUrl: String) {

  /**
   * Use output schemas to extract data from an attachment using AI
   * 
   * Expected answers:
   *   code 200 : StructuredContentResult (OK)
   * 
   * Available security schemes:
   *   API_KEY (apiKey)
   * 
   * @param generateStructuredContentAttachmentOptions 
   */
  def generateStructuredContentFromAttachment(apiKey: String)(generateStructuredContentAttachmentOptions: GenerateStructuredContentAttachmentOptions
): Request[Either[ResponseError[Exception], StructuredContentResult], Nothing] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/ai/structured-content/attachment")
      .contentType("application/json")
      .header("x-api-key", apiKey)
      .body(generateStructuredContentAttachmentOptions)
      .response(asJson[StructuredContentResult])

  /**
   * Use output schemas to extract data from an email using AI
   * 
   * Expected answers:
   *   code 200 : StructuredContentResult (OK)
   * 
   * Available security schemes:
   *   API_KEY (apiKey)
   * 
   * @param generateStructuredContentEmailOptions 
   */
  def generateStructuredContentFromEmail(apiKey: String)(generateStructuredContentEmailOptions: GenerateStructuredContentEmailOptions
): Request[Either[ResponseError[Exception], StructuredContentResult], Nothing] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/ai/structured-content/email")
      .contentType("application/json")
      .header("x-api-key", apiKey)
      .body(generateStructuredContentEmailOptions)
      .response(asJson[StructuredContentResult])

  /**
   * Check if a schema is valid and can be used to extract data using AI
   * 
   * Expected answers:
   *   code 200 : StructuredOutputSchemaValidation (OK)
   * 
   * Available security schemes:
   *   API_KEY (apiKey)
   * 
   * @param structuredOutputSchema 
   */
  def validateStructuredOutputSchema(apiKey: String)(structuredOutputSchema: StructuredOutputSchema
): Request[Either[ResponseError[Exception], StructuredOutputSchemaValidation], Nothing] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/ai/structured-content/validate")
      .contentType("application/json")
      .header("x-api-key", apiKey)
      .body(structuredOutputSchema)
      .response(asJson[StructuredOutputSchemaValidation])

}
