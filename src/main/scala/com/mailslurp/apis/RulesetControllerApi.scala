/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.mailslurp.apis

import com.mailslurp.modelspackageVersion&#x3D;17.0.0.CreateRulesetOptions
import com.mailslurp.modelspackageVersion&#x3D;17.0.0.InboxRulesetTestResult
import java.time.OffsetDateTime
import com.mailslurp.modelspackageVersion&#x3D;17.0.0.PageRulesetDto
import com.mailslurp.modelspackageVersion&#x3D;17.0.0.RulesetDto
import com.mailslurp.modelspackageVersion&#x3D;17.0.0.RulesetTestOptions
import com.mailslurp.modelspackageVersion&#x3D;17.0.0.TestInboxRulesetSendingOptions
import com.mailslurp.modelspackageVersion&#x3D;17.0.0.TestNewInboxRulesetOptions
import com.mailslurp.modelspackageVersion&#x3D;17.0.0.TestRulesetReceivingOptions
import com.mailslurp.modelspackageVersion&#x3D;17.0.0.TestRulesetReceivingResult
import com.mailslurp.modelspackageVersion&#x3D;17.0.0.TestRulesetSendingResult
import java.util.UUID
import com.mailslurp.client.core.JsonSupport._
import sttp.client._
import sttp.model.Method

object RulesetControllerApi {

def apply(baseUrl: String = "https://api.mailslurp.com") = new RulesetControllerApi(baseUrl)
}

class RulesetControllerApi(baseUrl: String) {

  /**
   * Create a new inbox or phone number rule for forwarding, blocking, and allowing emails or SMS when sending and receiving
   * 
   * Expected answers:
   *   code 200 : RulesetDto (OK)
   * 
   * Available security schemes:
   *   API_KEY (apiKey)
   * 
   * @param createRulesetOptions 
   * @param inboxId Inbox id to attach ruleset to
   * @param phoneId Phone id to attach ruleset to
   */
  def createNewRuleset(apiKey: String)(createRulesetOptions: CreateRulesetOptions, inboxId: Option[UUID] = None, phoneId: Option[UUID] = None
): Request[Either[ResponseError[Exception], RulesetDto], Nothing] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/rulesets?inboxId=${ inboxId }&phoneId=${ phoneId }")
      .contentType("application/json")
      .header("x-api-key", apiKey)
      .body(createRulesetOptions)
      .response(asJson[RulesetDto])

  /**
   * Delete ruleset
   * 
   * Expected answers:
   *   code 204 :  (No Content)
   * 
   * Available security schemes:
   *   API_KEY (apiKey)
   * 
   * @param id ID of ruleset
   */
  def deleteRuleset(apiKey: String)(id: UUID
): Request[Either[ResponseError[Exception], Unit], Nothing] =
    basicRequest
      .method(Method.DELETE, uri"$baseUrl/rulesets/${id}")
      .contentType("application/json")
      .header("x-api-key", apiKey)
      .response(asJson[Unit])

  /**
   * Delete rulesets. Accepts optional inboxId or phoneId filters.
   * 
   * Expected answers:
   *   code 204 :  (No Content)
   * 
   * Available security schemes:
   *   API_KEY (apiKey)
   * 
   * @param inboxId Optional inbox id to attach ruleset to
   * @param phoneId 
   */
  def deleteRulesets(apiKey: String)(inboxId: Option[UUID] = None, phoneId: Option[UUID] = None
): Request[Either[ResponseError[Exception], Unit], Nothing] =
    basicRequest
      .method(Method.DELETE, uri"$baseUrl/rulesets?inboxId=${ inboxId }&phoneId=${ phoneId }")
      .contentType("application/json")
      .header("x-api-key", apiKey)
      .response(asJson[Unit])

  /**
   * Get ruleset
   * 
   * Expected answers:
   *   code 200 : RulesetDto (OK)
   * 
   * Available security schemes:
   *   API_KEY (apiKey)
   * 
   * @param id ID of ruleset
   */
  def getRuleset(apiKey: String)(id: UUID
): Request[Either[ResponseError[Exception], RulesetDto], Nothing] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/rulesets/${id}")
      .contentType("application/json")
      .header("x-api-key", apiKey)
      .response(asJson[RulesetDto])

  /**
   * List all rulesets attached to an inbox or phone or account
   * 
   * Expected answers:
   *   code 200 : PageRulesetDto (OK)
   * 
   * Available security schemes:
   *   API_KEY (apiKey)
   * 
   * @param inboxId Optional inbox id to get rulesets from
   * @param phoneId Optional phone id to get rulesets from
   * @param page Optional page index in inbox ruleset list pagination
   * @param size Optional page size in inbox ruleset list pagination
   * @param sort Optional createdAt sort direction ASC or DESC
   * @param searchFilter Optional search filter
   * @param since Filter by created at after the given timestamp
   * @param before Filter by created at before the given timestamp
   */
  def getRulesets(apiKey: String)(inboxId: Option[UUID] = None, phoneId: Option[UUID] = None, page: Option[Int] = None, size: Option[Int] = None, sort: Option[String] = None, searchFilter: Option[String] = None, since: Option[OffsetDateTime] = None, before: Option[OffsetDateTime] = None
): Request[Either[ResponseError[Exception], PageRulesetDto], Nothing] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/rulesets?inboxId=${ inboxId }&phoneId=${ phoneId }&page=${ page }&size=${ size }&sort=${ sort }&searchFilter=${ searchFilter }&since=${ since }&before=${ before }")
      .contentType("application/json")
      .header("x-api-key", apiKey)
      .response(asJson[PageRulesetDto])

  /**
   * Test inbox rulesets for inbox
   * 
   * Expected answers:
   *   code 200 : InboxRulesetTestResult (OK)
   * 
   * Available security schemes:
   *   API_KEY (apiKey)
   * 
   * @param inboxId ID of inbox
   * @param rulesetTestOptions 
   */
  def testInboxRulesetsForInbox(apiKey: String)(inboxId: UUID, rulesetTestOptions: RulesetTestOptions
): Request[Either[ResponseError[Exception], InboxRulesetTestResult], Nothing] =
    basicRequest
      .method(Method.PUT, uri"$baseUrl/rulesets?inboxId=${ inboxId }")
      .contentType("application/json")
      .header("x-api-key", apiKey)
      .body(rulesetTestOptions)
      .response(asJson[InboxRulesetTestResult])

  /**
   * Test new ruleset
   * 
   * Expected answers:
   *   code 200 : InboxRulesetTestResult (OK)
   * 
   * Available security schemes:
   *   API_KEY (apiKey)
   * 
   * @param testNewInboxRulesetOptions 
   */
  def testNewRuleset(apiKey: String)(testNewInboxRulesetOptions: TestNewInboxRulesetOptions
): Request[Either[ResponseError[Exception], InboxRulesetTestResult], Nothing] =
    basicRequest
      .method(Method.PATCH, uri"$baseUrl/rulesets")
      .contentType("application/json")
      .header("x-api-key", apiKey)
      .body(testNewInboxRulesetOptions)
      .response(asJson[InboxRulesetTestResult])

  /**
   * Test an inbox or phone ruleset
   * 
   * Expected answers:
   *   code 200 : InboxRulesetTestResult (OK)
   * 
   * Available security schemes:
   *   API_KEY (apiKey)
   * 
   * @param id ID of ruleset
   * @param rulesetTestOptions 
   */
  def testRuleset(apiKey: String)(id: UUID, rulesetTestOptions: RulesetTestOptions
): Request[Either[ResponseError[Exception], InboxRulesetTestResult], Nothing] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/rulesets/${id}/test")
      .contentType("application/json")
      .header("x-api-key", apiKey)
      .body(rulesetTestOptions)
      .response(asJson[InboxRulesetTestResult])

  /**
   * Test whether inbound emails from an email address would be blocked or allowed by inbox rulesets or test if phone number can receive SMS
   * 
   * Expected answers:
   *   code 200 : TestRulesetReceivingResult (OK)
   * 
   * Available security schemes:
   *   API_KEY (apiKey)
   * 
   * @param testRulesetReceivingOptions 
   */
  def testRulesetReceiving(apiKey: String)(testRulesetReceivingOptions: TestRulesetReceivingOptions
): Request[Either[ResponseError[Exception], TestRulesetReceivingResult], Nothing] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/rulesets/test-receiving")
      .contentType("application/json")
      .header("x-api-key", apiKey)
      .body(testRulesetReceivingOptions)
      .response(asJson[TestRulesetReceivingResult])

  /**
   * Test whether outbound emails to an email address would be blocked or allowed by inbox rulesets or whether a phone number can send SMS
   * 
   * Expected answers:
   *   code 200 : TestRulesetSendingResult (OK)
   * 
   * Available security schemes:
   *   API_KEY (apiKey)
   * 
   * @param testInboxRulesetSendingOptions 
   */
  def testRulesetSending(apiKey: String)(testInboxRulesetSendingOptions: TestInboxRulesetSendingOptions
): Request[Either[ResponseError[Exception], TestRulesetSendingResult], Nothing] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/rulesets/test-sending")
      .contentType("application/json")
      .header("x-api-key", apiKey)
      .body(testInboxRulesetSendingOptions)
      .response(asJson[TestRulesetSendingResult])

}
