/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.mailslurp.apis

import com.mailslurp.modelspackageVersion&#x3D;16.2.4.CreateTotpDeviceBase32SecretKeyOptions
import com.mailslurp.modelspackageVersion&#x3D;16.2.4.CreateTotpDeviceCustomOptions
import com.mailslurp.modelspackageVersion&#x3D;16.2.4.CreateTotpDeviceOtpAuthUrlOptions
import java.time.OffsetDateTime
import com.mailslurp.modelspackageVersion&#x3D;16.2.4.TotpDeviceCodeDto
import com.mailslurp.modelspackageVersion&#x3D;16.2.4.TotpDeviceDto
import com.mailslurp.modelspackageVersion&#x3D;16.2.4.TotpDeviceOptionalDto
import java.util.UUID
import com.mailslurp.client.core.JsonSupport._
import sttp.client._
import sttp.model.Method

object MFAControllerApi {

def apply(baseUrl: String = "https://api.mailslurp.com") = new MFAControllerApi(baseUrl)
}

class MFAControllerApi(baseUrl: String) {

  /**
   * Create a virtual TOTP device for a given secret key. This is usually present as an alternative login option when pairing OTP devices.
   * 
   * Expected answers:
   *   code 200 : TotpDeviceDto (OK)
   * 
   * Available security schemes:
   *   API_KEY (apiKey)
   * 
   * @param createTotpDeviceBase32SecretKeyOptions 
   */
  def createTotpDeviceForBase32SecretKey(apiKey: String)(createTotpDeviceBase32SecretKeyOptions: CreateTotpDeviceBase32SecretKeyOptions
): Request[Either[ResponseError[Exception], TotpDeviceDto], Nothing] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/mfa/totp/device/base32SecretKey")
      .contentType("application/json")
      .header("x-api-key", apiKey)
      .body(createTotpDeviceBase32SecretKeyOptions)
      .response(asJson[TotpDeviceDto])

  /**
   * Create a virtual TOTP device for custom options specifying all parameters of the TOTP device.
   * 
   * Expected answers:
   *   code 200 : TotpDeviceDto (OK)
   * 
   * Available security schemes:
   *   API_KEY (apiKey)
   * 
   * @param createTotpDeviceCustomOptions 
   */
  def createTotpDeviceForCustom(apiKey: String)(createTotpDeviceCustomOptions: CreateTotpDeviceCustomOptions
): Request[Either[ResponseError[Exception], TotpDeviceDto], Nothing] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/mfa/totp/device/custom")
      .contentType("application/json")
      .header("x-api-key", apiKey)
      .body(createTotpDeviceCustomOptions)
      .response(asJson[TotpDeviceDto])

  /**
   * Create a virtual TOTP device for a given OTP Auth URL such as otpauth://totp/MyApp:alice@example.com?secret=ABC123&issuer=MyApp&period=30&digits=6&algorithm=SHA1. You can provider overrides in the options for each component of the URL.
   * 
   * Expected answers:
   *   code 200 : TotpDeviceDto (OK)
   * 
   * Available security schemes:
   *   API_KEY (apiKey)
   * 
   * @param createTotpDeviceOtpAuthUrlOptions 
   */
  def createTotpDeviceForOtpAuthUrl(apiKey: String)(createTotpDeviceOtpAuthUrlOptions: CreateTotpDeviceOtpAuthUrlOptions
): Request[Either[ResponseError[Exception], TotpDeviceDto], Nothing] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/mfa/totp/device/otpAuthUrl")
      .contentType("application/json")
      .header("x-api-key", apiKey)
      .body(createTotpDeviceOtpAuthUrlOptions)
      .response(asJson[TotpDeviceDto])

  /**
   * Get Time-Based One-Time Password (TOTP) device by its ID.
   * 
   * Expected answers:
   *   code 200 : TotpDeviceDto (OK)
   * 
   * Available security schemes:
   *   API_KEY (apiKey)
   * 
   * @param id 
   */
  def getTotpDevice(apiKey: String)(id: UUID
): Request[Either[ResponseError[Exception], TotpDeviceDto], Nothing] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/mfa/totp/device/${id}")
      .contentType("application/json")
      .header("x-api-key", apiKey)
      .response(asJson[TotpDeviceDto])

  /**
   * Get Time-Based One-Time Password (TOTP) device by its username and issuer mapping.
   * 
   * Expected answers:
   *   code 200 : TotpDeviceOptionalDto (OK)
   * 
   * Available security schemes:
   *   API_KEY (apiKey)
   * 
   * @param name Optional name filter
   * @param issuer Optional issuer filter
   * @param username Optional username filter
   */
  def getTotpDeviceBy(apiKey: String)(name: Option[String] = None, issuer: Option[String] = None, username: Option[String] = None
): Request[Either[ResponseError[Exception], TotpDeviceOptionalDto], Nothing] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/mfa/totp/device/by?name=${ name }&issuer=${ issuer }&username=${ username }")
      .contentType("application/json")
      .header("x-api-key", apiKey)
      .response(asJson[TotpDeviceOptionalDto])

  /**
   * Get Time-Based One-Time Password for a device by its ID.
   * 
   * Expected answers:
   *   code 200 : TotpDeviceCodeDto (OK)
   * 
   * Available security schemes:
   *   API_KEY (apiKey)
   * 
   * @param id ID of the TOTP device to get the code for
   * @param at Optional time to get code for. If not provided, current time is used.
   * @param minSecondsUntilExpire Optional minimum time until code expires. Will hold thread open until period reached.
   */
  def getTotpDeviceCode(apiKey: String)(id: UUID, at: Option[OffsetDateTime] = None, minSecondsUntilExpire: Option[Int] = None
): Request[Either[ResponseError[Exception], TotpDeviceCodeDto], Nothing] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/mfa/totp/device/${id}/code?at=${ at }&minSecondsUntilExpire=${ minSecondsUntilExpire }")
      .contentType("application/json")
      .header("x-api-key", apiKey)
      .response(asJson[TotpDeviceCodeDto])

}
