/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.mailslurp.apis

import com.mailslurp.modelspackageVersion&#x3D;16.1.1.ConsentStatusDto
import com.mailslurp.modelspackageVersion&#x3D;16.1.1.CreateEmergencyAddressOptions
import com.mailslurp.modelspackageVersion&#x3D;16.1.1.CreatePhoneNumberOptions
import com.mailslurp.modelspackageVersion&#x3D;16.1.1.EmergencyAddress
import com.mailslurp.modelspackageVersion&#x3D;16.1.1.EmergencyAddressDto
import com.mailslurp.modelspackageVersion&#x3D;16.1.1.EmptyResponseDto
import java.time.OffsetDateTime
import com.mailslurp.modelspackageVersion&#x3D;16.1.1.PagePhoneMessageThreadItemProjection
import com.mailslurp.modelspackageVersion&#x3D;16.1.1.PagePhoneMessageThreadProjection
import com.mailslurp.modelspackageVersion&#x3D;16.1.1.PagePhoneNumberProjection
import com.mailslurp.modelspackageVersion&#x3D;16.1.1.PageSentSmsProjection
import com.mailslurp.modelspackageVersion&#x3D;16.1.1.PageSmsProjection
import com.mailslurp.modelspackageVersion&#x3D;16.1.1.PhoneNumberDto
import com.mailslurp.modelspackageVersion&#x3D;16.1.1.PhoneNumberValidationDto
import com.mailslurp.modelspackageVersion&#x3D;16.1.1.PhonePlanAvailability
import com.mailslurp.modelspackageVersion&#x3D;16.1.1.PhonePlanDto
import com.mailslurp.modelspackageVersion&#x3D;16.1.1.SentSmsDto
import com.mailslurp.modelspackageVersion&#x3D;16.1.1.SetPhoneFavouritedOptions
import com.mailslurp.modelspackageVersion&#x3D;16.1.1.SmsSendOptions
import com.mailslurp.modelspackageVersion&#x3D;16.1.1.TestPhoneNumberOptions
import java.util.UUID
import com.mailslurp.modelspackageVersion&#x3D;16.1.1.UpdatePhoneNumberOptions
import com.mailslurp.modelspackageVersion&#x3D;16.1.1.ValidatePhoneNumberOptions
import com.mailslurp.client.core.JsonSupport._
import sttp.client._
import sttp.model.Method

object PhoneControllerApi {

def apply(baseUrl: String = "https://api.mailslurp.com") = new PhoneControllerApi(baseUrl)
}

class PhoneControllerApi(baseUrl: String) {

  /**
   * Add an emergency address to a phone number
   * 
   * Expected answers:
   *   code 200 : EmergencyAddress (OK)
   * 
   * Available security schemes:
   *   API_KEY (apiKey)
   * 
   * @param createEmergencyAddressOptions 
   */
  def createEmergencyAddress(apiKey: String)(createEmergencyAddressOptions: CreateEmergencyAddressOptions
): Request[Either[ResponseError[Exception], EmergencyAddress], Nothing] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/phone/emergency-addresses")
      .contentType("application/json")
      .header("x-api-key", apiKey)
      .body(createEmergencyAddressOptions)
      .response(asJson[EmergencyAddress])

  /**
   * Create new phone number
   * 
   * Expected answers:
   *   code 200 : PhoneNumberDto (OK)
   * 
   * Available security schemes:
   *   API_KEY (apiKey)
   * 
   * @param createPhoneNumberOptions 
   */
  def createPhoneNumber(apiKey: String)(createPhoneNumberOptions: CreatePhoneNumberOptions
): Request[Either[ResponseError[Exception], PhoneNumberDto], Nothing] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/phone")
      .contentType("application/json")
      .header("x-api-key", apiKey)
      .body(createPhoneNumberOptions)
      .response(asJson[PhoneNumberDto])

  /**
   * Delete an emergency address
   * 
   * Expected answers:
   *   code 200 : EmptyResponseDto (OK)
   * 
   * Available security schemes:
   *   API_KEY (apiKey)
   * 
   * @param addressId 
   */
  def deleteEmergencyAddress(apiKey: String)(addressId: UUID
): Request[Either[ResponseError[Exception], EmptyResponseDto], Nothing] =
    basicRequest
      .method(Method.DELETE, uri"$baseUrl/phone/emergency-addresses/${addressId}")
      .contentType("application/json")
      .header("x-api-key", apiKey)
      .response(asJson[EmptyResponseDto])

  /**
   * Remove phone number from account
   * 
   * Expected answers:
   *   code 204 :  (No Content)
   * 
   * Available security schemes:
   *   API_KEY (apiKey)
   * 
   * @param phoneNumberId 
   */
  def deletePhoneNumber(apiKey: String)(phoneNumberId: UUID
): Request[Either[ResponseError[Exception], Unit], Nothing] =
    basicRequest
      .method(Method.DELETE, uri"$baseUrl/phone/numbers/${phoneNumberId}")
      .contentType("application/json")
      .header("x-api-key", apiKey)
      .response(asJson[Unit])

  /**
   * List all message threads for all phones
   * 
   * Expected answers:
   *   code 200 : PagePhoneMessageThreadProjection (OK)
   * 
   * Available security schemes:
   *   API_KEY (apiKey)
   * 
   * @param page 
   * @param size 
   */
  def getAllPhoneMessageThreads(apiKey: String)(page: Option[Int] = None, size: Option[Int] = None
): Request[Either[ResponseError[Exception], PagePhoneMessageThreadProjection], Nothing] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/phone/numbers/message-threads?page=${ page }&size=${ size }")
      .contentType("application/json")
      .header("x-api-key", apiKey)
      .response(asJson[PagePhoneMessageThreadProjection])

  /**
   * Get the status of phone usage consent
   * 
   * Expected answers:
   *   code 200 : ConsentStatusDto (OK)
   * 
   * Available security schemes:
   *   API_KEY (apiKey)
   */
  def getConsentStatus(apiKey: String)(
): Request[Either[ResponseError[Exception], ConsentStatusDto], Nothing] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/phone/consent")
      .contentType("application/json")
      .header("x-api-key", apiKey)
      .response(asJson[ConsentStatusDto])

  /**
   * Fetch an emergency address by ID
   * 
   * Expected answers:
   *   code 200 : EmergencyAddress (OK)
   * 
   * Available security schemes:
   *   API_KEY (apiKey)
   * 
   * @param addressId 
   */
  def getEmergencyAddress(apiKey: String)(addressId: UUID
): Request[Either[ResponseError[Exception], EmergencyAddress], Nothing] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/phone/emergency-addresses/${addressId}")
      .contentType("application/json")
      .header("x-api-key", apiKey)
      .response(asJson[EmergencyAddress])

  /**
   * List emergency addresses
   * 
   * Expected answers:
   *   code 200 : Seq[EmergencyAddressDto] (OK)
   * 
   * Available security schemes:
   *   API_KEY (apiKey)
   */
  def getEmergencyAddresses(apiKey: String)(
): Request[Either[ResponseError[Exception], Seq[EmergencyAddressDto]], Nothing] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/phone/emergency-addresses")
      .contentType("application/json")
      .header("x-api-key", apiKey)
      .response(asJson[Seq[EmergencyAddressDto]])

  /**
   * List message thread messages for a phone message thread
   * 
   * Expected answers:
   *   code 200 : PagePhoneMessageThreadItemProjection (OK)
   * 
   * Available security schemes:
   *   API_KEY (apiKey)
   * 
   * @param phoneNumberId 
   * @param otherNumber 
   * @param page 
   * @param size 
   */
  def getPhoneMessageThreadItems(apiKey: String)(phoneNumberId: UUID, otherNumber: String, page: Option[Int] = None, size: Option[Int] = None
): Request[Either[ResponseError[Exception], PagePhoneMessageThreadItemProjection], Nothing] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/phone/numbers/${phoneNumberId}/message-threads/${otherNumber}?page=${ page }&size=${ size }")
      .contentType("application/json")
      .header("x-api-key", apiKey)
      .response(asJson[PagePhoneMessageThreadItemProjection])

  /**
   * List message threads for a phone
   * 
   * Expected answers:
   *   code 200 : PagePhoneMessageThreadProjection (OK)
   * 
   * Available security schemes:
   *   API_KEY (apiKey)
   * 
   * @param phoneNumberId 
   * @param page 
   * @param size 
   */
  def getPhoneMessageThreads(apiKey: String)(phoneNumberId: UUID, page: Option[Int] = None, size: Option[Int] = None
): Request[Either[ResponseError[Exception], PagePhoneMessageThreadProjection], Nothing] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/phone/numbers/${phoneNumberId}/message-threads?page=${ page }&size=${ size }")
      .contentType("application/json")
      .header("x-api-key", apiKey)
      .response(asJson[PagePhoneMessageThreadProjection])

  /**
   * Get a phone number by ID
   * 
   * Expected answers:
   *   code 200 : PhoneNumberDto (OK)
   * 
   * Available security schemes:
   *   API_KEY (apiKey)
   * 
   * @param phoneNumberId 
   */
  def getPhoneNumber(apiKey: String)(phoneNumberId: UUID
): Request[Either[ResponseError[Exception], PhoneNumberDto], Nothing] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/phone/numbers/${phoneNumberId}")
      .contentType("application/json")
      .header("x-api-key", apiKey)
      .response(asJson[PhoneNumberDto])

  /**
   * Get a phone number by name
   * 
   * Expected answers:
   *   code 200 : PhoneNumberDto (OK)
   * 
   * Available security schemes:
   *   API_KEY (apiKey)
   * 
   * @param name 
   */
  def getPhoneNumberByName(apiKey: String)(name: String
): Request[Either[ResponseError[Exception], PhoneNumberDto], Nothing] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/phone/numbers/by-name?name=${ name }")
      .contentType("application/json")
      .header("x-api-key", apiKey)
      .response(asJson[PhoneNumberDto])

  /**
   * Get a phone number by phone number
   * 
   * Expected answers:
   *   code 200 : PhoneNumberDto (OK)
   * 
   * Available security schemes:
   *   API_KEY (apiKey)
   * 
   * @param phoneNumber 
   */
  def getPhoneNumberByPhoneNumber(apiKey: String)(phoneNumber: String
): Request[Either[ResponseError[Exception], PhoneNumberDto], Nothing] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/phone/numbers/by-phone-number?phoneNumber=${ phoneNumber }")
      .contentType("application/json")
      .header("x-api-key", apiKey)
      .response(asJson[PhoneNumberDto])

  /**
   * List phone numbers for account
   * 
   * Expected answers:
   *   code 200 : PagePhoneNumberProjection (OK)
   * 
   * Available security schemes:
   *   API_KEY (apiKey)
   * 
   * @param phoneCountry Optional phone country
   * @param page Optional page index for list pagination
   * @param size Optional page size for list pagination
   * @param sort Optional createdAt sort direction ASC or DESC
   * @param since Filter by created at after the given timestamp
   * @param before Filter by created at before the given timestamp
   * @param search Optional search filter
   * @param include Optional phoneIds to include in result
   * @param favourite Optionally filter results for favourites only
   */
  def getPhoneNumbers(apiKey: String)(phoneCountry: Option[String] = None, page: Option[Int] = None, size: Option[Int] = None, sort: Option[String] = None, since: Option[OffsetDateTime] = None, before: Option[OffsetDateTime] = None, search: Option[String] = None, include: Seq[UUID], favourite: Option[Boolean] = None
): Request[Either[ResponseError[Exception], PagePhoneNumberProjection], Nothing] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/phone/numbers?phoneCountry=${ phoneCountry }&page=${ page }&size=${ size }&sort=${ sort }&since=${ since }&before=${ before }&search=${ search }&include=${ include }&favourite=${ favourite }")
      .contentType("application/json")
      .header("x-api-key", apiKey)
      .response(asJson[PagePhoneNumberProjection])

  /**
   * Get phone number plans
   * 
   * Expected answers:
   *   code 200 : Seq[PhonePlanDto] (OK)
   * 
   * Available security schemes:
   *   API_KEY (apiKey)
   */
  def getPhonePlans(apiKey: String)(
): Request[Either[ResponseError[Exception], Seq[PhonePlanDto]], Nothing] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/phone/plans")
      .contentType("application/json")
      .header("x-api-key", apiKey)
      .response(asJson[Seq[PhonePlanDto]])

  /**
   * Expected answers:
   *   code 200 : PhonePlanAvailability (OK)
   * 
   * Available security schemes:
   *   API_KEY (apiKey)
   */
  def getPhonePlansAvailability(apiKey: String)(
): Request[Either[ResponseError[Exception], PhonePlanAvailability], Nothing] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/phone/plans/availability")
      .contentType("application/json")
      .header("x-api-key", apiKey)
      .response(asJson[PhonePlanAvailability])

  /**
   * Get sent SMS messages for a phone number
   * 
   * Expected answers:
   *   code 200 : PageSentSmsProjection (OK)
   * 
   * Available security schemes:
   *   API_KEY (apiKey)
   * 
   * @param phoneNumberId 
   * @param page Optional page index in SMS list pagination
   * @param size Optional page size in SMS list pagination. Maximum size is 100. Use page index and sort to page through larger results
   * @param sort Optional createdAt sort direction ASC or DESC
   * @param since Optional filter SMSs received after given date time
   * @param before Optional filter SMSs received before given date time
   * @param search Optional search filter
   */
  def getSentSmsByPhoneNumber(apiKey: String)(phoneNumberId: UUID, page: Option[Int] = None, size: Option[Int] = None, sort: Option[String] = None, since: Option[OffsetDateTime] = None, before: Option[OffsetDateTime] = None, search: Option[String] = None
): Request[Either[ResponseError[Exception], PageSentSmsProjection], Nothing] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/phone/numbers/${phoneNumberId}/sms-sent?page=${ page }&size=${ size }&sort=${ sort }&since=${ since }&before=${ before }&search=${ search }")
      .contentType("application/json")
      .header("x-api-key", apiKey)
      .response(asJson[PageSentSmsProjection])

  /**
   * Get SMS messages for a phone number
   * 
   * Expected answers:
   *   code 200 : PageSmsProjection (OK)
   * 
   * Available security schemes:
   *   API_KEY (apiKey)
   * 
   * @param phoneNumberId 
   * @param page Optional page index in SMS list pagination
   * @param size Optional page size in SMS list pagination. Maximum size is 100. Use page index and sort to page through larger results
   * @param sort Optional createdAt sort direction ASC or DESC
   * @param unreadOnly Optional filter for unread SMS only. All SMS are considered unread until they are viewed in the dashboard or requested directly
   * @param since Optional filter SMSs received after given date time
   * @param before Optional filter SMSs received before given date time
   * @param search Optional search filter
   * @param favourite Optionally filter results for favourites only
   */
  def getSmsByPhoneNumber(apiKey: String)(phoneNumberId: UUID, page: Option[Int] = None, size: Option[Int] = None, sort: Option[String] = None, unreadOnly: Option[Boolean] = None, since: Option[OffsetDateTime] = None, before: Option[OffsetDateTime] = None, search: Option[String] = None, favourite: Option[Boolean] = None
): Request[Either[ResponseError[Exception], PageSmsProjection], Nothing] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/phone/numbers/${phoneNumberId}/sms?page=${ page }&size=${ size }&sort=${ sort }&unreadOnly=${ unreadOnly }&since=${ since }&before=${ before }&search=${ search }&favourite=${ favourite }")
      .contentType("application/json")
      .header("x-api-key", apiKey)
      .response(asJson[PageSmsProjection])

  /**
   * Send SMS from a phone number
   * 
   * Expected answers:
   *   code 200 : SentSmsDto (OK)
   * 
   * Available security schemes:
   *   API_KEY (apiKey)
   * 
   * @param phoneNumberId 
   * @param smsSendOptions 
   */
  def sendSmsFromPhoneNumber(apiKey: String)(phoneNumberId: UUID, smsSendOptions: SmsSendOptions
): Request[Either[ResponseError[Exception], SentSmsDto], Nothing] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/phone/numbers/${phoneNumberId}/sms")
      .contentType("application/json")
      .header("x-api-key", apiKey)
      .body(smsSendOptions)
      .response(asJson[SentSmsDto])

  /**
   * Give or revoke consent for phone usage
   * 
   * Expected answers:
   *   code 200 : ConsentStatusDto (OK)
   * 
   * Available security schemes:
   *   API_KEY (apiKey)
   * 
   * @param agree 
   */
  def setConsentStatus(apiKey: String)(agree: Boolean
): Request[Either[ResponseError[Exception], ConsentStatusDto], Nothing] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/phone/consent?agree=${ agree }")
      .contentType("application/json")
      .header("x-api-key", apiKey)
      .response(asJson[ConsentStatusDto])

  /**
   * Set and return new favorite state for a phone
   * 
   * Expected answers:
   *   code 200 : PhoneNumberDto (OK)
   * 
   * Available security schemes:
   *   API_KEY (apiKey)
   * 
   * @param phoneNumberId ID of phone to set favourite state
   * @param setPhoneFavouritedOptions 
   */
  def setPhoneFavourited(apiKey: String)(phoneNumberId: UUID, setPhoneFavouritedOptions: SetPhoneFavouritedOptions
): Request[Either[ResponseError[Exception], PhoneNumberDto], Nothing] =
    basicRequest
      .method(Method.PUT, uri"$baseUrl/phone/numbers/${phoneNumberId}/favourite")
      .contentType("application/json")
      .header("x-api-key", apiKey)
      .body(setPhoneFavouritedOptions)
      .response(asJson[PhoneNumberDto])

  /**
   * Test a phone number by sending an SMS to it
   * 
   * Expected answers:
   *   code 200 :  (OK)
   * 
   * Available security schemes:
   *   API_KEY (apiKey)
   * 
   * @param phoneNumberId 
   * @param testPhoneNumberOptions 
   * @param xTestId 
   */
  def testPhoneNumberSendSms(apiKey: String)(phoneNumberId: UUID, testPhoneNumberOptions: TestPhoneNumberOptions, xTestId: Option[String] = None
): Request[Either[ResponseError[Exception], Unit], Nothing] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/phone/numbers/${phoneNumberId}/test")
      .contentType("application/json")
      .header("x-test-id", xTestId)
      .header("x-api-key", apiKey)
      .body(testPhoneNumberOptions)
      .response(asJson[Unit])

  /**
   * Set field for phone number
   * 
   * Expected answers:
   *   code 200 : PhoneNumberDto (OK)
   * 
   * Available security schemes:
   *   API_KEY (apiKey)
   * 
   * @param phoneNumberId ID of phone to set favourite state
   * @param updatePhoneNumberOptions 
   */
  def updatePhoneNumber(apiKey: String)(phoneNumberId: UUID, updatePhoneNumberOptions: UpdatePhoneNumberOptions
): Request[Either[ResponseError[Exception], PhoneNumberDto], Nothing] =
    basicRequest
      .method(Method.PUT, uri"$baseUrl/phone/numbers/${phoneNumberId}")
      .contentType("application/json")
      .header("x-api-key", apiKey)
      .body(updatePhoneNumberOptions)
      .response(asJson[PhoneNumberDto])

  /**
   * Validate a phone number
   * 
   * Expected answers:
   *   code 200 : PhoneNumberValidationDto (OK)
   * 
   * Available security schemes:
   *   API_KEY (apiKey)
   * 
   * @param validatePhoneNumberOptions 
   */
  def validatePhoneNumber(apiKey: String)(validatePhoneNumberOptions: ValidatePhoneNumberOptions
): Request[Either[ResponseError[Exception], PhoneNumberValidationDto], Nothing] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/phone/validate")
      .contentType("application/json")
      .header("x-api-key", apiKey)
      .body(validatePhoneNumberOptions)
      .response(asJson[PhoneNumberValidationDto])

}
