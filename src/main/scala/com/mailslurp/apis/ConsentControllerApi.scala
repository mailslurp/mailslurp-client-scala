/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.mailslurp.apis

import com.mailslurp.modelspackageVersion&#x3D;16.0.4.OptInConsentOptions
import com.mailslurp.modelspackageVersion&#x3D;16.0.4.OptInConsentSendResult
import com.mailslurp.modelspackageVersion&#x3D;16.0.4.OptInSendingConsentDto
import com.mailslurp.modelspackageVersion&#x3D;16.0.4.PageOptInIdentityProjection
import com.mailslurp.client.core.JsonSupport._
import sttp.client._
import sttp.model.Method

object ConsentControllerApi {

def apply(baseUrl: String = "https://api.mailslurp.com") = new ConsentControllerApi(baseUrl)
}

class ConsentControllerApi(baseUrl: String) {

  /**
   * Expected answers:
   *   code 200 : OptInSendingConsentDto (OK)
   * 
   * Available security schemes:
   *   API_KEY (apiKey)
   * 
   * @param emailAddress Email address to check consent for
   */
  def checkSendingConsentForEmailAddress(apiKey: String)(emailAddress: String
): Request[Either[ResponseError[Exception], OptInSendingConsentDto], Nothing] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/consent/opt-in/sending-consent?emailAddress=${ emailAddress }")
      .contentType("application/json")
      .header("x-api-key", apiKey)
      .response(asJson[OptInSendingConsentDto])

  /**
   * Expected answers:
   *   code 200 : PageOptInIdentityProjection (OK)
   * 
   * Available security schemes:
   *   API_KEY (apiKey)
   * 
   * @param page Optional page index in list pagination
   * @param size Optional page size in list pagination
   * @param sort Optional createdAt sort direction ASC or DESC
   */
  def getOptInIdentities(apiKey: String)(page: Option[Int] = None, size: Option[Int] = None, sort: Option[String] = None
): Request[Either[ResponseError[Exception], PageOptInIdentityProjection], Nothing] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/consent/opt-in?page=${ page }&size=${ size }&sort=${ sort }")
      .contentType("application/json")
      .header("x-api-key", apiKey)
      .response(asJson[PageOptInIdentityProjection])

  /**
   * Expected answers:
   *   code 200 : OptInSendingConsentDto (OK)
   * 
   * Available security schemes:
   *   API_KEY (apiKey)
   * 
   * @param emailAddress Email address to revoke consent for
   */
  def revokeOptInConsentForEmailAddress(apiKey: String)(emailAddress: String
): Request[Either[ResponseError[Exception], OptInSendingConsentDto], Nothing] =
    basicRequest
      .method(Method.DELETE, uri"$baseUrl/consent/opt-in?emailAddress=${ emailAddress }")
      .contentType("application/json")
      .header("x-api-key", apiKey)
      .response(asJson[OptInSendingConsentDto])

  /**
   * Send double-opt in consent for an email address
   * 
   * Expected answers:
   *   code 200 : OptInConsentSendResult (OK)
   * 
   * Available security schemes:
   *   API_KEY (apiKey)
   * 
   * @param optInConsentOptions 
   */
  def sendOptInConsentForEmailAddress(apiKey: String)(optInConsentOptions: OptInConsentOptions
): Request[Either[ResponseError[Exception], OptInConsentSendResult], Nothing] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/consent/opt-in/send")
      .contentType("application/json")
      .header("x-api-key", apiKey)
      .body(optInConsentOptions)
      .response(asJson[OptInConsentSendResult])

}
