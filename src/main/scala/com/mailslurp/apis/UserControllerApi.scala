/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.mailslurp.apis

import java.time.OffsetDateTime
import com.mailslurp.modelspackageVersion&#x3D;16.1.0.PageEntityAutomationItems
import com.mailslurp.modelspackageVersion&#x3D;16.1.0.PageEntityEventItems
import com.mailslurp.modelspackageVersion&#x3D;16.1.0.PageEntityFavouriteItems
import java.util.UUID
import com.mailslurp.modelspackageVersion&#x3D;16.1.0.UserInfoDto
import com.mailslurp.client.core.JsonSupport._
import sttp.client._
import sttp.model.Method

object UserControllerApi {

def apply(baseUrl: String = "https://api.mailslurp.com") = new UserControllerApi(baseUrl)
}

class UserControllerApi(baseUrl: String) {

  /**
   * Expected answers:
   *   code 200 : PageEntityAutomationItems (OK)
   * 
   * Available security schemes:
   *   API_KEY (apiKey)
   * 
   * @param page Optional page index
   * @param size Optional page size
   * @param sort Optional createdAt sort direction ASC or DESC
   * @param since Filter by created at after the given timestamp
   * @param before Filter by created at before the given timestamp
   * @param inboxId Optional inbox ID
   * @param phoneId Optional phone ID
   * @param filter Optional automation type filter
   */
  def getEntityAutomations(apiKey: String)(page: Option[Int] = None, size: Option[Int] = None, sort: Option[String] = None, since: Option[OffsetDateTime] = None, before: Option[OffsetDateTime] = None, inboxId: Option[UUID] = None, phoneId: Option[UUID] = None, filter: Option[String] = None
): Request[Either[ResponseError[Exception], PageEntityAutomationItems], Nothing] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/user/automations?page=${ page }&size=${ size }&sort=${ sort }&since=${ since }&before=${ before }&inboxId=${ inboxId }&phoneId=${ phoneId }&filter=${ filter }")
      .contentType("application/json")
      .header("x-api-key", apiKey)
      .response(asJson[PageEntityAutomationItems])

  /**
   * Expected answers:
   *   code 200 : PageEntityEventItems (OK)
   * 
   * Available security schemes:
   *   API_KEY (apiKey)
   * 
   * @param page Optional page index
   * @param size Optional page size
   * @param sort Optional createdAt sort direction ASC or DESC
   * @param since Filter by created at after the given timestamp
   * @param before Filter by created at before the given timestamp
   * @param inboxId Optional inbox ID
   * @param emailId Optional email ID
   * @param phoneId Optional phone ID
   * @param smsId Optional SMS ID
   * @param attachmentId Optional attachment ID
   * @param filter Optional type filter
   */
  def getEntityEvents(apiKey: String)(page: Option[Int] = None, size: Option[Int] = None, sort: Option[String] = None, since: Option[OffsetDateTime] = None, before: Option[OffsetDateTime] = None, inboxId: Option[UUID] = None, emailId: Option[UUID] = None, phoneId: Option[UUID] = None, smsId: Option[UUID] = None, attachmentId: Option[UUID] = None, filter: Option[String] = None
): Request[Either[ResponseError[Exception], PageEntityEventItems], Nothing] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/user/events?page=${ page }&size=${ size }&sort=${ sort }&since=${ since }&before=${ before }&inboxId=${ inboxId }&emailId=${ emailId }&phoneId=${ phoneId }&smsId=${ smsId }&attachmentId=${ attachmentId }&filter=${ filter }")
      .contentType("application/json")
      .header("x-api-key", apiKey)
      .response(asJson[PageEntityEventItems])

  /**
   * Expected answers:
   *   code 200 : PageEntityFavouriteItems (OK)
   * 
   * Available security schemes:
   *   API_KEY (apiKey)
   * 
   * @param page Optional page index
   * @param size Optional page size
   * @param sort Optional createdAt sort direction ASC or DESC
   * @param since Filter by created at after the given timestamp
   * @param before Filter by created at before the given timestamp
   * @param filter Optional type filter
   */
  def getEntityFavorites(apiKey: String)(page: Option[Int] = None, size: Option[Int] = None, sort: Option[String] = None, since: Option[OffsetDateTime] = None, before: Option[OffsetDateTime] = None, filter: Option[String] = None
): Request[Either[ResponseError[Exception], PageEntityFavouriteItems], Nothing] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/user/favorites?page=${ page }&size=${ size }&sort=${ sort }&since=${ since }&before=${ before }&filter=${ filter }")
      .contentType("application/json")
      .header("x-api-key", apiKey)
      .response(asJson[PageEntityFavouriteItems])

  /**
   * Utility function to extract properties from JSON objects in language where this is cumbersome.
   * 
   * Expected answers:
   *   code 200 : String (OK)
   * 
   * Available security schemes:
   *   API_KEY (apiKey)
   * 
   * @param property JSON property name or dot separated path selector such as `a.b.c`
   * @param body 
   */
  def getJsonPropertyAsString(apiKey: String)(property: String, body: Any
): Request[Either[ResponseError[Exception], String], Nothing] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/user/json/pluck?property=${ property }")
      .contentType("application/json")
      .header("x-api-key", apiKey)
      .body(body)
      .response(asJson[String])

  /**
   * Get account information for your user
   * 
   * Expected answers:
   *   code 200 : UserInfoDto (OK)
   * 
   * Available security schemes:
   *   API_KEY (apiKey)
   */
  def getUserInfo(apiKey: String)(
): Request[Either[ResponseError[Exception], UserInfoDto], Nothing] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/user/info")
      .contentType("application/json")
      .header("x-api-key", apiKey)
      .response(asJson[UserInfoDto])

}
