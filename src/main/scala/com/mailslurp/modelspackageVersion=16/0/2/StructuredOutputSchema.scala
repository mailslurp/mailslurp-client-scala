/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.mailslurp.modelspackageVersion&#x3D;16.0.2


  /**
   * Structured output schema to use for generation
   */
case class StructuredOutputSchema(
  anyOf: Option[Seq[StructuredOutputSchema]] = None,
  default: Option[Any] = None,
  description: Option[String] = None,
  enum: Option[Seq[String]] = None,
  example: Option[Any] = None,
  format: Option[String] = None,
  items: Option[StructuredOutputSchema] = None,
  maxItems: Option[Long] = None,
  minItems: Option[Long] = None,
  maxLength: Option[Long] = None,
  minLength: Option[Long] = None,
  pattern: Option[String] = None,
  properties: Option[Map[String, StructuredOutputSchema]] = None,
  propertyOrdering: Option[Seq[String]] = None,
  required: Option[Seq[String]] = None,
  maxProperties: Option[Long] = None,
  minProperties: Option[Long] = None,
  maximum: Option[Double] = None,
  minimum: Option[Double] = None,
  nullable: Option[Boolean] = None,
  title: Option[String] = None,
  /* Primitive JSON schema types with a fallback CUSTOM for unknown values. */
  `type`: Option[StructuredOutputSchemaEnums.`Type`] = None
)

object StructuredOutputSchemaEnums {

  type `Type` = `Type`.Value
  object `Type` extends Enumeration {
    val String = Value("string")
    val Number = Value("number")
    val Integer = Value("integer")
    val Boolean = Value("boolean")
    val `Object` = Value("object")
    val Array = Value("array")
    val `Null` = Value("null")
  }

}

