/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.mailslurp.modelspackageVersion&#x3D;16.1.2


  /**
   * JSON output schema for structured content repsonses. This schema dictates the format that an AI should use when responding to your instructions.
   */
case class StructuredOutputSchema(
  anyOf: Option[Seq[StructuredOutputSchema]] = None,
  default: Option[Any] = None,
  /* Provide a description of the schema to help the AI understand the schema. */
  description: Option[String] = None,
  /* When using type string and format enum pass a collection of enum values here. */
  enum: Option[Seq[String]] = None,
  example: Option[Any] = None,
  /* Format for string types. Can be null, date-time or enum. */
  format: Option[String] = None,
  items: Option[StructuredOutputSchema] = None,
  maxItems: Option[Long] = None,
  minItems: Option[Long] = None,
  maxLength: Option[Long] = None,
  minLength: Option[Long] = None,
  pattern: Option[String] = None,
  /* Properties of an OBJECT schema. These are key value pairs where the key is the property name and the value is the schema for that property. */
  properties: Option[Map[String, StructuredOutputSchema]] = None,
  /* Pass an array of property names to specify the order of properties in the generated JSON object if required. */
  propertyOrdering: Option[Seq[String]] = None,
  required: Option[Seq[String]] = None,
  maxProperties: Option[Long] = None,
  minProperties: Option[Long] = None,
  maximum: Option[Double] = None,
  minimum: Option[Double] = None,
  nullable: Option[Boolean] = None,
  title: Option[String] = None,
  /* Primitive JSON schema types with a fallback CUSTOM for unknown values. */
  `type`: Option[StructuredOutputSchemaEnums.`Type`] = None
)

object StructuredOutputSchemaEnums {

  type `Type` = `Type`.Value
  object `Type` extends Enumeration {
    val String = Value("string")
    val Number = Value("number")
    val Integer = Value("integer")
    val Boolean = Value("boolean")
    val `Object` = Value("object")
    val Array = Value("array")
    val `Null` = Value("null")
  }

}

