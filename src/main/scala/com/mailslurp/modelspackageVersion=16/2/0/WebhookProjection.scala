/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.mailslurp.modelspackageVersion&#x3D;16.2.0

import java.time.OffsetDateTime
import java.util.UUID

  /**
   * Representation of a webhook
   */
case class WebhookProjection(
  url: String,
  password: Option[String] = None,
  username: Option[String] = None,
  inboxId: Option[UUID] = None,
  userId: UUID,
  eventName: Option[WebhookProjectionEnums.EventName] = None,
  updatedAt: OffsetDateTime,
  createdAt: OffsetDateTime,
  aiTransformId: Option[UUID] = None,
  healthStatus: Option[WebhookProjectionEnums.HealthStatus] = None,
  phoneNumberId: Option[UUID] = None,
  name: Option[String] = None,
  id: UUID
)

object WebhookProjectionEnums {

  type EventName = EventName.Value
  type HealthStatus = HealthStatus.Value
  object EventName extends Enumeration {
    val EMAILRECEIVED = Value("EMAIL_RECEIVED")
    val NEWEMAIL = Value("NEW_EMAIL")
    val NEWCONTACT = Value("NEW_CONTACT")
    val NEWATTACHMENT = Value("NEW_ATTACHMENT")
    val EMAILOPENED = Value("EMAIL_OPENED")
    val EMAILREAD = Value("EMAIL_READ")
    val DELIVERYSTATUS = Value("DELIVERY_STATUS")
    val BOUNCE = Value("BOUNCE")
    val BOUNCERECIPIENT = Value("BOUNCE_RECIPIENT")
    val NEWSMS = Value("NEW_SMS")
    val NEWGUESTUSER = Value("NEW_GUEST_USER")
  }

  object HealthStatus extends Enumeration {
    val HEALTHY = Value("HEALTHY")
    val UNHEALTHY = Value("UNHEALTHY")
  }

}

