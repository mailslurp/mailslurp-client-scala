/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.mailslurp.modelspackageVersion&#x3D;16.2.5

import java.time.OffsetDateTime
import java.util.UUID

case class EmailThreadItem(
  itemType: EmailThreadItemEnums.ItemType,
  entityId: UUID,
  bodyExcerpt: Option[String] = None,
  textExcerpt: Option[String] = None,
  subject: Option[String] = None,
  to: Seq[String],
  from: Option[String] = None,
  bcc: Option[Seq[String]] = None,
  cc: Option[Seq[String]] = None,
  attachments: Option[Seq[String]] = None,
  createdAt: OffsetDateTime,
  read: Boolean,
  inReplyTo: Option[String] = None,
  messageId: Option[String] = None,
  threadId: Option[UUID] = None,
  sender: Option[Sender] = None,
  recipients: Option[EmailRecipients] = None
)

object EmailThreadItemEnums {

  type ItemType = ItemType.Value
  object ItemType extends Enumeration {
    val RECEIVEDEMAIL = Value("RECEIVED_EMAIL")
    val SENTEMAIL = Value("SENT_EMAIL")
  }

}

