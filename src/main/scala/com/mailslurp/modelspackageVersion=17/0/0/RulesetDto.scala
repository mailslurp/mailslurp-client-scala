/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.mailslurp.modelspackageVersion&#x3D;17.0.0

import java.time.OffsetDateTime
import java.util.UUID

  /**
   * Rules for an inbox or phone number. Rulesets can be used to block, allow, filter, or bounce emails or SMS when sending or receiving.
   */
case class RulesetDto(
  id: UUID,
  inboxId: Option[UUID] = None,
  phoneId: Option[UUID] = None,
  scope: RulesetDtoEnums.Scope,
  action: RulesetDtoEnums.Action,
  target: String,
  handler: RulesetDtoEnums.Handler,
  createdAt: OffsetDateTime
)

object RulesetDtoEnums {

  type Scope = Scope.Value
  type Action = Action.Value
  type Handler = Handler.Value
  object Scope extends Enumeration {
    val RECEIVINGEMAILS = Value("RECEIVING_EMAILS")
    val SENDINGEMAILS = Value("SENDING_EMAILS")
    val RECEIVINGSMS = Value("RECEIVING_SMS")
    val SENDINGSMS = Value("SENDING_SMS")
  }

  object Action extends Enumeration {
    val BLOCK = Value("BLOCK")
    val ALLOW = Value("ALLOW")
    val FILTERREMOVE = Value("FILTER_REMOVE")
    val BOUNCESOFT = Value("BOUNCE_SOFT")
    val BOUNCEHARD = Value("BOUNCE_HARD")
  }

  object Handler extends Enumeration {
    val EXCEPTION = Value("EXCEPTION")
  }

}

